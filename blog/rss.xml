<?xml version="1.0" encoding="ISO-8859-1" ?>
<rss version="2.0">

<channel>
  <title>Shuhao's Blog</title>
  <link>http://shuhaowu.com/blog/</link>
  <description>My random thoughts.</description>
  
  <item>
    <title>Playing with Go (as a Python developer)</title>
    <author>Shuhao</author>
    <link>http://shuhaowu.com/blog/playing_with_go.html</link>
    <pubDate>Fri, 05 Apr 2013 02:00</pubDate>
    <description>
      
      &lt;p&gt;It seems like I have gotten into the bad habit of coding and blogging before exams.
My first exam is in 12 days and I have barely started studying (actually,
I barely &lt;em&gt;know&lt;/em&gt; the content).&lt;/p&gt;
&lt;p&gt;That aside, I&#39;ve taken the last few days to learn Go. I&#39;ve heard a lot of good
things from HN and I actually had a reason to use something more efficient than
Python.&lt;/p&gt;
&lt;p&gt;So I thought I&#39;d try to make a simple 2D video game in Go as a training exercise
first before I jump into doing actual projects. Something like Pong
or Tank would work well to introduce me to most of the major concepts of a
language.&lt;/p&gt;
&lt;p&gt;One of the first thing that jumped out at me while writing code in Go is that
I did not feel like I was writing code with static typing. Most of the time, I
was able to leverage the power of the &lt;code&gt;:=&lt;/code&gt; operator in Go, which is able to
infer the type of the right hand side expression for you. You do have to specify
the types of all function arguments and returns, but I already do that as
documenting functions in Python usually involve variable types.&lt;/p&gt;
&lt;p&gt;I also enjoy all the restrictions that Go poses when compiling programs. I&#39;ve
seen people say that they don&#39;t like the fact that Go won&#39;t compile if there is
an unused variable, or an unused import. I for one actually like this limitation
as it allowed me to write cleaner code in general, free of left overs from a
previous iteration of the code, or something like that.&lt;/p&gt;
&lt;p&gt;Another thing is that I love is how easy it is to use libraries, whether it be
standard libraries or third party ones. Something like
&lt;code&gt;import &#34;github.com/jmhodges/levigo&#34;&lt;/code&gt; not only makes referencing the
origin of a package easy, &lt;code&gt;go get -u&lt;/code&gt; can actually grab all the
dependencies automatically without having something like requirements.txt.
On top of that, if you go into your &lt;code&gt;$GOPATH&lt;/code&gt; and take a look, you&#39;ll see that
all the libraries are in folders exactly as you have specified. This means no
more messy Makefiles or the use of an IDE.&lt;/p&gt;
&lt;p&gt;Speaking of which, editor plugins are lacking for Go. If you use vim,
emacs, or Sublime Text, you&#39;re in luck. Apparently there are awesome extensions
that does what people want. However, if you&#39;re like me and use something that&#39;s not
in the above three (even though I&#39;m writing this blog post in vim), you might
have some trouble getting support. I personally use Komodo Edit and its support
for Go is &lt;em&gt;abysmal&lt;/em&gt; (I use the plugin from &lt;a href=&#34;https://github.com/trentm/komodo-go&#34;&gt;here&lt;/a&gt;).
All I have is syntax highlighting (kinda). There is no autoindent on &lt;code&gt;{&lt;/code&gt; and
no inline function lookups. Syntax checking is flaky and only works occasionally.&lt;/p&gt;
&lt;p&gt;(For those that wants me to switch to vim, emacs, or Sublime: I don&#39;t get more
productive with vim or emacs, especially when there is a lot of files, and I&#39;m
not paying for my editor.)&lt;/p&gt;
&lt;p&gt;Documentation is excellent. While its &#34;docstring&#34; format makes the inline
documentations look exactly like regular comments, the generated documents are
beautifully consistent. http://godoc.org is awesome as you can just append
the url of most libraries and get all your documentation needs.
If that&#39;s not possible, you could always fall back to &lt;code&gt;go doc&lt;/code&gt;.
There is no inconsistent styles (for things like pages) like in Python, and
generating docs &lt;em&gt;just works&lt;/em&gt; (in the sense that you don&#39;t need to, as &lt;code&gt;go doc&lt;/code&gt;
takes care of that for you).&lt;/p&gt;
&lt;p&gt;I like the idea of statically linking everything into a single binary. While
this is not possible in all cases, it really simplifies deployment as you just
need to push out one binary and be done with it.&lt;/p&gt;
&lt;p&gt;This is probably not everything I&#39;ve encountered, but these are most of the
stuff that stood out. After writing about ~1k LOC during
times when I should be listening and taking note (yay engineering school~),
I can definitely go on writing more (the reaction was different when
I learned Java).&lt;/p&gt;
&lt;p&gt;Some stuff I miss as a Python developer: error handling, tuples,
list comprehensions, ternary operator, default arguments, and real OOP.
Regarding OOP: I&#39;m not a big OOP fan myself, but sometimes it is handy. Right
now initializing a struct is a nightmare as everyone seems to have their own
conventions, such as &lt;code&gt;obj := NewObject()&lt;/code&gt;,
&lt;code&gt;obj := new(Object) obj.Init()&lt;/code&gt;, &lt;code&gt;obj := &amp;amp;Object{} obj.Initialize()&lt;/code&gt;
and so forth.&lt;/p&gt;
&lt;p&gt;In case we forgot, I made a game with Go. It&#39;s called Go Pong. This is actually
a somewhat difficult task due to the lack of 2D libraries.
You can&#39;t run it because I had to use
a custom hack in order to make the game work. I don&#39;t have anywhere to host
the linux amd64 binary as of the moment. There is, however, a video of the game
in action:&lt;/p&gt;
&lt;iframe width=&#34;640&#34; height=&#34;360&#34; src=&#34;https://www.youtube.com/embed/sWwlvhQ1SdU?feature=player_detailpage&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;The source code is at https://github.com/shuhaowu/gopong if anyone is interested.
It makes use of a &lt;code&gt;SetRGBA&lt;/code&gt; method. This method is a custom made one as &lt;code&gt;CopyRGBA&lt;/code&gt;
takes way too long and slows the FPS to something like 20 as oppose to being
locked at 30.&lt;/p&gt;
&lt;p&gt;As a side note, the collision detection is horrible, as you can probably already
tell.&lt;/p&gt;
&lt;p&gt;So what&#39;s next on the radar? I&#39;m creating a nifty database (at least in my
opinion) called &lt;a href=&#34;https://github.com/shuhaowu/levelupdb&#34;&gt;Levelupdb&lt;/a&gt;. The goal
is a high performance, low footprint database server that is API-compatible with
Riak. However, the server is targeting low end boxes (&amp;lt;=512MB of RAM, VPSes
you get from LEB) and side projects that do not have a lot of users.&lt;/p&gt;
&lt;p&gt;In the mean while, however, I&#39;m going to bed.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Edit&lt;/strong&gt;: The Go plugin for Komodo Edit just got autoindent. You also need to
config gocode to be in Komodo&#39;s path in order for autocompletion to work.&lt;/p&gt;
      
    </description>
  </item>
  
  <item>
    <title>Reinventing the wheel: building funnel</title>
    <author>Shuhao</author>
    <link>http://shuhaowu.com/blog/building_funnel.html</link>
    <pubDate>Sun, 17 Mar 2013 21:20</pubDate>
    <description>
      
      &lt;p&gt;Hackers nowadays are all moving to static pages for their blogs/portfolios. 
There are several advantages for this approach:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Ease of use: No need to edit in a crappy WYSIWYG editor that generates HTML. 
    Edit directly in a text editor.&lt;/li&gt;
&lt;li&gt;Ease of deployment: no need to deploy to a special stack, run a monitoring
    service, a reverse proxy, LAMP, and all that nonsense. Just get anything
    that can serve html pages and you&#39;re set. &lt;em&gt;Hell&lt;/em&gt;, Github even provides you 
    with free hosting!&lt;/li&gt;
&lt;li&gt;Ease of scaling: it is probably the case that no one reads your blog during
    regular hours. However, when you write that one &lt;em&gt;brilliant&lt;/em&gt; article and HN
    decides that they&#39;re going to knock on your doors, your server will probably
    fall on its knees if you didn&#39;t scale properly. With a static html site, 
    scaling becomes much easier, especially if you let Github do it for you.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;(There are probably other reasons, but this is not the point of this post.)&lt;/p&gt;
&lt;p&gt;I started making a portfolio sometime ago. I remember using different
technologies: PHP, Python, raw HTML, and so forth. I never knew about things
like Jekyll and Pelican until &lt;em&gt;very&lt;/em&gt; recently. All I knew is that I have some
stuff I wanna create and ship. So I did. I made things that&#39;s embarassing, 
used terrible practises, and learned to hate technologies (*cough* php).
So about a year ago (Feb 13th 2012), I took a little bit of time and 
wrote &lt;a href=&#34;https://github.com/shuhaowu/Funnel/commit/b89c79a4891c30a9d474a647cee9ca25c09012ee&#34;&gt;Funnel&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;It was about 80 lines of code and it didn&#39;t do anything other than reading some
markdown files and json files in order to put up a static site. I then built a 
my portfolio with the help of Funnel and was quite satisfied.&lt;/p&gt;
&lt;p&gt;Over the year, I became increasingly dissatisfied with Funnel. I 
want to give blogging a go again, but Funnel does not have the capability for
that yet. I won&#39;t go back to self hosted solution or any sort of CMS as I really
like how the github + static pages setup work. At this point, I have learned 
about things like Jekyll and Pelican and started poking it around. &lt;/p&gt;
&lt;p&gt;First I looked at Jekyll. It didn&#39;t really pertain to me. The whole relied on
the Ruby stack. While I don&#39;t mind Ruby myself, I just don&#39;t have extra time
at the moment to learn everything behind it. I wanted to work with something
that I&#39;m already familiar in and can easily customize without jumping around in
documentations. Also, while I first looked up Jekyll, It wasn&#39;t clear to me on
how to author static pages using markdown and the package seemed to be geared towards 
blogging, which is the opposite of what I want: something geared towards static
pages but has blogging as a bonus.&lt;/p&gt;
&lt;p&gt;Pelican came next. kernel.org is powered by it now
so it seemed like a reasonable choice. While I read through the docs, the 
first thing that jumped out at me is, again, how
blog focused it is. The second heading of the documentation is &#34;Kickstart a 
blog&#34;. The docs also wanted me to get a blogroll in my settings file (first of all, 
why a blogroll. Secondly, why in my settings file! If I want one I can just 
insert it into my blog template). It also wanted me to get a tags page and so forth.
I understand that these are features that could be good to include, but why are
the &lt;em&gt;required&lt;/em&gt;? Can&#39;t the generator just graciously fall back if tags.html is
not found?&lt;/p&gt;
&lt;p&gt;To top it all off, both Pelican and Jekyll seems bloated. Sure, it may offer a
lot of features (and lack some that I want, as I never found out how to have 
multiple sections in one page for both), but I fail to see the justification
of having something so hefty. I thought that since programmers are the only ones
using these static site generators (after all, they&#39;re not too friendly to use
for normal folks), we would want something that we can hack around to our
likings. &lt;/p&gt;
&lt;p&gt;So at the end of the day I just rewrote Funnel to include blogs. It&#39;s
definitely &lt;a href=&#34;https://github.com/shuhaowu/Funnel/blob/master/funnel&#34;&gt;not pretty&lt;/a&gt;.
There are a lot of features that&#39;s lacking. It can also be bloated as it
relies on a crap load of libraries (Flask, Frozen-Flask and their dependencies).
However the important thing is that I can now do what I want to do with ease 
and don&#39;t have to deal with things like &lt;code&gt;rake post title=&#34;My blawg post&#34;&lt;/code&gt;
(real men (or women, or men identified with women... and so forth) don&#39;t use
commands to generate a text file, they &lt;code&gt;touch&lt;/code&gt; it instead?) and tags.html.&lt;/p&gt;
&lt;p&gt;On top of all of that, reinventing the wheel was actually quite fun. I rewrote 
funnel and made it feature complete for me in one night, before a midterm. That
kind of atmosphere is exciting and awesome in my view, even though it may promote 
&lt;a href=&#34;http://chinpen.net/blog/2013/02/hackathons-are-bad-for-you/&#34;&gt;bad life style&lt;/a&gt;.&lt;/p&gt;
      
    </description>
  </item>
  
  <item>
    <title>Hello World!</title>
    <author>Shuhao</author>
    <link>http://shuhaowu.com/blog/helloworld.html</link>
    <pubDate>Sun, 10 Mar 2013 12:50</pubDate>
    <description>
      
      &lt;p&gt;What is this? A blog? :O&lt;/p&gt;
&lt;p&gt;Instead of studying (4 hours before an exam that I&#39;m gonna &lt;em&gt;fail&lt;/em&gt;), I got this
site to work with the new &lt;a href=&#34;https://github.com/shuhaowu/funnel&#34;&gt;funnel&lt;/a&gt; and
got the blog working...&lt;/p&gt;
      
    </description>
  </item>
  
</channel>

</rss>